name: LeakMoon Advanced Auto-Issue

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Manual trigger

jobs:
  scan-and-report:
    runs-on: ubuntu-latest
    permissions:
      issues: write  # Needed to create/update issues

    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Set up Python
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3️⃣ Install LeakMoon dependencies
      - name: Install LeakMoon dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f config/requirements.txt ]; then pip install -r config/requirements.txt; fi

      # 4️⃣ Run LeakMoon scan
      - name: Run LeakMoon scan
        id: leakscan
        run: |
          mkdir -p scan_results
          leakmoon scan core/ web/ config/ test_files/ > scan_results/leaks.txt || true
          leaks_count=$(wc -l < scan_results/leaks.txt)
          echo "leaks_count=$leaks_count" >> $GITHUB_ENV

      # 5️⃣ Create, update, or close GitHub issue
      - name: Create or update LeakMoon issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const leaksFile = 'scan_results/leaks.txt';
            const leaksExist = fs.existsSync(leaksFile) && fs.readFileSync(leaksFile, 'utf8').trim() !== '';

            // Use octokit.rest to access issues
            const octokit = github;

            // List existing open LeakMoon issues
            const { data: issues } = await octokit.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['leakmoon']
            });

            const existing = issues.find(issue => issue.title.startsWith('LeakMoon detected'));

            if (leaksExist) {
              const leaks = fs.readFileSync(leaksFile, 'utf8');
              if (existing) {
                // Update existing issue
                await octokit.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existing.number,
                  body: `LeakMoon scan detected the following potential secrets, credentials, or PII:\n\n${leaks}`
                });
              } else {
                // Create a new issue
                await octokit.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `LeakMoon detected ${process.env.leaks_count} potential secret(s)`,
                  body: `LeakMoon scan detected the following potential secrets, credentials, or PII:\n\n${leaks}`,
                  labels: ['security', 'leakmoon']
                });
              }
            } else if (existing) {
              // Close existing issue if no leaks
              await octokit.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                state: 'closed'
              });
            }
